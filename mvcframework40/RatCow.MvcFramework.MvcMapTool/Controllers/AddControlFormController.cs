/*This stub code was generated by the MvcFramework compiler, created by RatCow Soft - 
 See http://code.google.com/p/ratcowsoftopensource/ */

using System;
using System.Windows.Forms;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using System.ComponentModel;

//3rd Party
using RatCow.MvcFramework;

namespace RatCow.MvcFramework.MvcMapTool
{
  internal partial class AddControlFormController : BaseController<AddControlForm>, IModalSubFormContainer
  {
    List<Store> registeredTypes = new List<Store>();

    protected override void ViewLoad()
    {
      base.ViewLoad();

      //load the current controls
      LoadClassData();

      //configure the first drop down
      controlCombo.DataSource = registeredTypes;
      controlCombo.DisplayMember = "ClassName";
      controlCombo.ValueMember = "ClassType";
    }

    private void LoadClassData()
    {
      Assembly[] assemblies = AppDomain.CurrentDomain.GetAssemblies();
      foreach ( Assembly a in assemblies )
      {
        foreach ( Type t in a.GetExportedTypes() )
        {
          // Ignore type if not a public class
          if ( !t.IsClass || !t.IsPublic ) continue;

          //skip non controls
          if ( !( t == typeof( Control ) || t.IsSubclassOf( typeof( Control ) ) ) && !( t == typeof( Component ) || t.IsSubclassOf( typeof( Component ) ) ) ) continue;

          //register the type...
          try
          {
            //added extra stuff to cover class creation
            if ( registeredTypes.Where( x => x.ClassName == t.Name || x.ClassName == t.FullName ).Count() <= 0 )
            {
              var classname = ( t.FullName.Replace( t.Name, String.Empty ) == "System.Windows.Forms." ? t.Name : t.FullName );
              registeredTypes.Add( new Store() { ClassName = classname, ClassType = t } ); //try to only store the fullname if we need to
            }
          }
          catch ( Exception ex )
          {
            System.Diagnostics.Debug.WriteLine( String.Format( "{0} - {1}", ex.GetType().Name, ex.Message ) );
            System.Diagnostics.Debug.WriteLine( ex.StackTrace );
          }
        }
      }
    }


    #region IModalSubFormContainer Members

    public bool PerformModalTask<T, R>( T data, ref R result )
    {
      if ( View.ShowDialog() == DialogResult.OK )
      {
        //get the selected item
        var rdata = (Store)( controlCombo.SelectedItem );

        var selected = new Tools.ViewControlAction() { ControlType = rdata.ClassType.Name }; //TODO: use FullName here, it's safer.

        result = (R)(object)selected;
        return ( selected != null );
      }
      else
        return false;
    }

    public bool PerformModalTask<T>( T data )
    {
      throw new NotImplementedException();
    }

    public bool PerformModalTask()
    {
      throw new NotImplementedException();
    }

    #endregion
  }
}

